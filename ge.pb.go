// Code generated by protoc-gen-go.
// source: ge.proto
// DO NOT EDIT!

/*
Package ge is a generated protocol buffer package.

It is generated from these files:
	ge.proto

It has these top-level messages:
	Envelope
	Ping
	Response
	Node
	GetRequest
	SetRequest
	DeleteRequest
	WatchRequest
*/
package ge

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type Envelope struct {
	Ping     *Ping     `protobuf:"bytes,1,opt,name=ping" json:"ping,omitempty"`
	Response *Response `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
}

func (m *Envelope) Reset()         { *m = Envelope{} }
func (m *Envelope) String() string { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()    {}

func (m *Envelope) GetPing() *Ping {
	if m != nil {
		return m.Ping
	}
	return nil
}

func (m *Envelope) GetResponse() *Response {
	if m != nil {
		return m.Response
	}
	return nil
}

type Ping struct {
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}

type Response struct {
	StrongConsistency bool   `protobuf:"varint,1,opt,name=strong_consistency" json:"strong_consistency,omitempty"`
	Action            string `protobuf:"bytes,11,opt,name=action" json:"action,omitempty"`
	Node              *Node  `protobuf:"bytes,12,opt,name=node" json:"node,omitempty"`
	PrevNode          *Node  `protobuf:"bytes,13,opt,name=prev_node" json:"prev_node,omitempty"`
	EtcdIndex         uint64 `protobuf:"varint,14,opt,name=etcd_index" json:"etcd_index,omitempty"`
	RaftIndex         uint64 `protobuf:"varint,15,opt,name=raft_index" json:"raft_index,omitempty"`
	RaftTerm          uint64 `protobuf:"varint,16,opt,name=raft_term" json:"raft_term,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}

func (m *Response) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *Response) GetPrevNode() *Node {
	if m != nil {
		return m.PrevNode
	}
	return nil
}

type Node struct {
	Path          string  `protobuf:"bytes,11,opt,name=path" json:"path,omitempty"`
	Value         string  `protobuf:"bytes,12,opt,name=value" json:"value,omitempty"`
	Dir           bool    `protobuf:"varint,13,opt,name=dir" json:"dir,omitempty"`
	Expiration    int64   `protobuf:"varint,14,opt,name=expiration" json:"expiration,omitempty"`
	Ttl           int64   `protobuf:"varint,15,opt,name=ttl" json:"ttl,omitempty"`
	Nodes         []*Node `protobuf:"bytes,16,rep,name=nodes" json:"nodes,omitempty"`
	ModifiedIndex uint64  `protobuf:"varint,17,opt,name=modified_index" json:"modified_index,omitempty"`
	CreatedIndex  uint64  `protobuf:"varint,18,opt,name=created_index" json:"created_index,omitempty"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}

func (m *Node) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type GetRequest struct {
	StrongConsistency bool   `protobuf:"varint,1,opt,name=strong_consistency" json:"strong_consistency,omitempty"`
	Path              string `protobuf:"bytes,11,opt,name=path" json:"path,omitempty"`
	Sort              bool   `protobuf:"varint,12,opt,name=sort" json:"sort,omitempty"`
	Recursive         bool   `protobuf:"varint,13,opt,name=recursive" json:"recursive,omitempty"`
}

func (m *GetRequest) Reset()         { *m = GetRequest{} }
func (m *GetRequest) String() string { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()    {}

type SetRequest struct {
	StrongConsistency bool   `protobuf:"varint,1,opt,name=strong_consistency" json:"strong_consistency,omitempty"`
	Path              string `protobuf:"bytes,11,opt,name=path" json:"path,omitempty"`
	Value             string `protobuf:"bytes,12,opt,name=value" json:"value,omitempty"`
	Ttl               uint64 `protobuf:"varint,13,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *SetRequest) Reset()         { *m = SetRequest{} }
func (m *SetRequest) String() string { return proto.CompactTextString(m) }
func (*SetRequest) ProtoMessage()    {}

type DeleteRequest struct {
	StrongConsistency bool   `protobuf:"varint,1,opt,name=strong_consistency" json:"strong_consistency,omitempty"`
	Path              string `protobuf:"bytes,11,opt,name=path" json:"path,omitempty"`
	Recursive         bool   `protobuf:"varint,12,opt,name=recursive" json:"recursive,omitempty"`
}

func (m *DeleteRequest) Reset()         { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()    {}

type WatchRequest struct {
	StrongConsistency bool   `protobuf:"varint,1,opt,name=strong_consistency" json:"strong_consistency,omitempty"`
	Prefix            string `protobuf:"bytes,11,opt,name=prefix" json:"prefix,omitempty"`
	WaitIndex         uint64 `protobuf:"varint,12,opt,name=wait_index" json:"wait_index,omitempty"`
	Recursive         bool   `protobuf:"varint,13,opt,name=recursive" json:"recursive,omitempty"`
}

func (m *WatchRequest) Reset()         { *m = WatchRequest{} }
func (m *WatchRequest) String() string { return proto.CompactTextString(m) }
func (*WatchRequest) ProtoMessage()    {}

// Client API for Ge service

type GeClient interface {
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Response, error)
	Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Response, error)
	DeleteDir(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Response, error)
	Create(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*Response, error)
	CreateDir(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*Response, error)
	UpdateDir(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*Response, error)
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Ge_WatchClient, error)
	WatchOnce(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*Response, error)
}

type geClient struct {
	cc *grpc.ClientConn
}

func NewGeClient(cc *grpc.ClientConn) GeClient {
	return &geClient{cc}
}

func (c *geClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/ge.ge/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/ge.ge/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/ge.ge/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geClient) DeleteDir(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/ge.ge/DeleteDir", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geClient) Create(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/ge.ge/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geClient) CreateDir(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/ge.ge/CreateDir", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geClient) Update(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/ge.ge/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geClient) UpdateDir(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/ge.ge/UpdateDir", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (Ge_WatchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Ge_serviceDesc.Streams[0], c.cc, "/ge.ge/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &geWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ge_WatchClient interface {
	Recv() (*Envelope, error)
	grpc.ClientStream
}

type geWatchClient struct {
	grpc.ClientStream
}

func (x *geWatchClient) Recv() (*Envelope, error) {
	m := new(Envelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *geClient) WatchOnce(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/ge.ge/WatchOnce", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ge service

type GeServer interface {
	Get(context.Context, *GetRequest) (*Response, error)
	Set(context.Context, *SetRequest) (*Response, error)
	Delete(context.Context, *DeleteRequest) (*Response, error)
	DeleteDir(context.Context, *DeleteRequest) (*Response, error)
	Create(context.Context, *SetRequest) (*Response, error)
	CreateDir(context.Context, *SetRequest) (*Response, error)
	Update(context.Context, *SetRequest) (*Response, error)
	UpdateDir(context.Context, *SetRequest) (*Response, error)
	Watch(*WatchRequest, Ge_WatchServer) error
	WatchOnce(context.Context, *WatchRequest) (*Response, error)
}

func RegisterGeServer(s *grpc.Server, srv GeServer) {
	s.RegisterService(&_Ge_serviceDesc, srv)
}

func _Ge_Get_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(GetRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GeServer).Get(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Ge_Set_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(SetRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GeServer).Set(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Ge_Delete_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DeleteRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GeServer).Delete(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Ge_DeleteDir_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(DeleteRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GeServer).DeleteDir(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Ge_Create_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(SetRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GeServer).Create(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Ge_CreateDir_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(SetRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GeServer).CreateDir(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Ge_Update_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(SetRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GeServer).Update(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Ge_UpdateDir_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(SetRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GeServer).UpdateDir(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Ge_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GeServer).Watch(m, &geWatchServer{stream})
}

type Ge_WatchServer interface {
	Send(*Envelope) error
	grpc.ServerStream
}

type geWatchServer struct {
	grpc.ServerStream
}

func (x *geWatchServer) Send(m *Envelope) error {
	return x.ServerStream.SendMsg(m)
}

func _Ge_WatchOnce_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(WatchRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GeServer).WatchOnce(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Ge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ge.ge",
	HandlerType: (*GeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _Ge_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Ge_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Ge_Delete_Handler,
		},
		{
			MethodName: "DeleteDir",
			Handler:    _Ge_DeleteDir_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Ge_Create_Handler,
		},
		{
			MethodName: "CreateDir",
			Handler:    _Ge_CreateDir_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Ge_Update_Handler,
		},
		{
			MethodName: "UpdateDir",
			Handler:    _Ge_UpdateDir_Handler,
		},
		{
			MethodName: "WatchOnce",
			Handler:    _Ge_WatchOnce_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _Ge_Watch_Handler,
			ServerStreams: true,
		},
	},
}
